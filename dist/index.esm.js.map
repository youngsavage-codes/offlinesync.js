{"version":3,"file":"index.esm.js","sources":["../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/v4.js","../src/components/queue.ts","../src/components/storage.ts","../src/components/sync.ts","../src/components/conflict.ts","../src/components/utils.ts","../src/index.ts"],"sourcesContent":["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random || (options.rng || rng)();\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nclass Queue {\r\n  private queue: Action[] = [];\r\n  private maxQueueSize: number;\r\n\r\n  constructor(config: { maxQueueSize: number } = { maxQueueSize: 100 }) {\r\n    this.maxQueueSize = config.maxQueueSize;\r\n  }\r\n\r\n  // Add an action to the queue\r\n  add(action: Action): void {\r\n    if (!action.id) {\r\n      action.id = `${action.type}-${Date.now()}-${uuidv4()}`; // Generate unique ID\r\n    }\r\n\r\n    // Check for duplicate actions\r\n    const exists = this.queue.some(existingAction =>\r\n      existingAction.id === action.id ||\r\n      (existingAction.type === action.type && JSON.stringify(existingAction.data) === JSON.stringify(action.data))\r\n    );\r\n\r\n    if (exists) {\r\n      console.warn(`Duplicate action detected: ${action.id}`);\r\n      return;\r\n    }\r\n\r\n    // Maintain max queue size\r\n    if (this.queue.length >= this.maxQueueSize) {\r\n      this.queue.shift();\r\n    }\r\n\r\n    this.queue.push(action);\r\n  }\r\n\r\n  // Get all queued actions\r\n  get(): Action[] {\r\n    return [...this.queue]; // Return a copy to avoid mutation\r\n  }\r\n\r\n  // Replace the queue with new actions\r\n  set(actions: Action[]): void {\r\n    if (actions.length > this.maxQueueSize) {\r\n      actions = actions.slice(0, this.maxQueueSize); // Truncate if necessary\r\n    }\r\n    this.queue = actions;\r\n  }\r\n\r\n  // Remove action by ID\r\n  remove(actionId: string): void {\r\n    this.queue = this.queue.filter(action => action.id !== actionId);\r\n  }\r\n\r\n  // Clear all actions\r\n  clear(): void {\r\n    this.queue = [];\r\n  }\r\n\r\n  // Check if the queue is empty\r\n  isEmpty(): boolean {\r\n    return this.queue.length === 0;\r\n  }\r\n\r\n  // Get the size of the queue\r\n  size(): number {\r\n    return this.queue.length;\r\n  }\r\n}\r\n\r\nexport default Queue;\r\n","class Storage {\r\n  // Load data from localStorage by key\r\n  static load(key: string): any {\r\n    const data = localStorage.getItem(key);\r\n    return data ? JSON.parse(data) : null;\r\n  }\r\n\r\n  // Save data to localStorage under a key\r\n  static save(key: string, value: any): void {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n\r\n  // Remove an item from localStorage by key\r\n  static remove(key: string): void {\r\n    localStorage.removeItem(key);\r\n  }\r\n\r\n  // Clear all data from localStorage\r\n  static clear(): void {\r\n    localStorage.clear();\r\n  }\r\n}\r\n\r\nexport default Storage;\r\n","import Queue from './queue';\r\n\r\nclass Sync {\r\n  private queue: Queue;\r\n  private onSyncSuccess: ((syncedActions: any[]) => void) | null;\r\n  private onSyncError: ((error: Error, failedActions: any[]) => void) | null;\r\n\r\n  constructor(queue: Queue) {\r\n    this.queue = queue;\r\n    this.onSyncSuccess = null;\r\n    this.onSyncError = null;\r\n  }\r\n\r\n  // Set success callback\r\n  setSyncSuccessCallback(callback: (syncedActions: any[]) => void): void {\r\n    this.onSyncSuccess = callback;\r\n  }\r\n\r\n  // Set error callback\r\n  setSyncErrorCallback(callback: (error: Error, failedActions: any[]) => void): void {\r\n    this.onSyncError = callback;\r\n  }\r\n\r\n  // Start syncing the actions\r\n  async start(): Promise<void> {\r\n    const actions = this.queue.get();\r\n    if (actions.length === 0) {\r\n      console.log('No actions to sync.');\r\n      return;\r\n    }\r\n\r\n    const syncedActions: any[] = [];\r\n    const failedActions: any[] = [];\r\n\r\n    try {\r\n      for (const action of actions) {\r\n        try {\r\n          // Simulate API call for syncing\r\n          await this.syncAction(action);\r\n          console.log(`Action synced: ${action.type}`);\r\n          await syncedActions.push(action);\r\n          this.queue?.remove(action.id)\r\n        } catch (error: any) {\r\n          console.error(`Failed to sync action: ${action.type}. Error: ${error.message}`);\r\n          failedActions.push(action);\r\n        }\r\n      }\r\n\r\n      // Update the queue with failed actions\r\n      this.queue.set(failedActions);\r\n\r\n      if (failedActions.length > 0 && this.onSyncError) {\r\n        const error = new Error('Some actions failed to sync');\r\n        this.onSyncError(error, failedActions);\r\n      }\r\n\r\n      if (syncedActions.length > 0 && this.onSyncSuccess) {\r\n        this.onSyncSuccess(syncedActions);\r\n      }\r\n    } catch (error) {\r\n      console.error('Unexpected error during sync:', error);\r\n      if (this.onSyncError) {\r\n        this.onSyncError(error as Error, actions);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Simulate syncing an action\r\n  private async syncAction(action: any): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (Math.random() > 0.8) {\r\n          reject(new Error('Simulated network or server issue'));\r\n        } else {\r\n          resolve();\r\n        }\r\n      }, 1000);\r\n    });\r\n  }\r\n}\r\n\r\nexport default Sync;\r\n","interface ConflictResolutionStrategy {\r\n  resolve(localAction: any, remoteAction: any): any;\r\n}\r\n\r\nclass LatestActionStrategy implements ConflictResolutionStrategy {\r\n  resolve(localAction: any, remoteAction: any): any {\r\n    return localAction.timestamp > remoteAction.timestamp ? localAction : remoteAction;\r\n  }\r\n}\r\n\r\nclass MergeChangesStrategy implements ConflictResolutionStrategy {\r\n  resolve(localAction: any, remoteAction: any): any {\r\n    if (localAction.type === 'update' && remoteAction.type === 'update') {\r\n      return { ...remoteAction, ...localAction };\r\n    }\r\n    return localAction.timestamp > remoteAction.timestamp ? localAction : remoteAction;\r\n  }\r\n}\r\n\r\nexport { LatestActionStrategy, MergeChangesStrategy };\r\n","export function isOnline(): boolean {\r\n  return navigator.onLine;\r\n}\r\n\r\nexport function getCurrentTimestamp(): number {\r\n  return Date.now();\r\n}\r\n","import Queue from './components/queue';\r\nimport Storage from './components/storage';\r\nimport Sync from './components/sync';\r\nimport { LatestActionStrategy } from './components/conflict';\r\nimport { isOnline, getCurrentTimestamp } from './components/utils';\r\n\r\nclass OfflineSync {\r\n  private queue: Queue;\r\n  private sync: Sync;\r\n  private conflictResolution: LatestActionStrategy;\r\n  public onlineStatus: boolean;\r\n  private statusCheckInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor(config: { maxQueueSize: number; conflictStrategy: string }) {\r\n    this.queue = new Queue(config);\r\n    this.sync = new Sync(this.queue);\r\n    this.conflictResolution = new LatestActionStrategy();\r\n    this.onlineStatus = isOnline(); // Set initial online status\r\n\r\n    // Load the queue from localStorage if there are any saved actions\r\n    const savedActions = Storage.load('offlineActions');\r\n    if (savedActions) {\r\n      savedActions.forEach((action: any) => this.queue.add(action));\r\n    }\r\n\r\n    // Attach sync success callback\r\n    this.sync.setSyncSuccessCallback((syncedActions) => {\r\n      console.log('Sync completed successfully:', syncedActions);\r\n      // Remove successfully synced actions and update localStorage\r\n      syncedActions.forEach((action: any) => this.queue.remove(action.id));\r\n      Storage.save('offlineActions', this.queue.get()); // Sync queue to localStorage\r\n    });\r\n\r\n    // Start detecting the status automatically\r\n    this.detectStatus();\r\n\r\n    // Listen for manual online/offline status changes\r\n    window.addEventListener('online', this.handleOnlineStatus);\r\n    window.addEventListener('offline', this.handleOfflineStatus);\r\n  }\r\n\r\n  // Detect and update online status every second\r\n  detectStatus() {\r\n    this.statusCheckInterval = setInterval(() => {\r\n      const currentStatus = isOnline();\r\n      this.handleStatusChange(currentStatus);\r\n    }, 1000);\r\n  }\r\n\r\n  // Handle status changes\r\n  private handleStatusChange = (status: boolean) => {\r\n    if (this.onlineStatus !== status) {\r\n      this.onlineStatus = status;\r\n      console.log('Online Status Changed:', this.onlineStatus ? 'Online' : 'Offline');\r\n\r\n      if (this.onlineStatus) {\r\n        this.startSync();\r\n      }\r\n    }\r\n  };\r\n\r\n  private handleOnlineStatus = () => this.handleStatusChange(true);\r\n  private handleOfflineStatus = () => this.handleStatusChange(false);\r\n\r\n  // Add an action to the queue and save to localStorage\r\n  addAction(action: any): void {\r\n    const timestamp = getCurrentTimestamp();\r\n    this.queue.add({ ...action, timestamp });\r\n\r\n    // Save the updated queue to localStorage\r\n    Storage.save('offlineActions', this.queue.get());\r\n  }\r\n\r\n  // Start the syncing process\r\n  startSync(): void {\r\n    if (this.onlineStatus) {\r\n      this.sync.start().catch((err) => {\r\n        console.error('Sync process failed:', err);\r\n      });\r\n      console.log('Sync process started - Online');\r\n    } else {\r\n      console.log('Offline. Queuing actions.');\r\n    }\r\n  }\r\n\r\n  getQueuedActions(): Action[] {\r\n    const queued = this.queue?.get() || [];\r\n    return queued\r\n  }\r\n\r\n  removeActionFromQueue(actionId: string): void {\r\n    if (!this.queue) {\r\n      console.error('Queue is not initialized.');\r\n      return;\r\n    }\r\n  \r\n    this.queue.remove(actionId);\r\n  \r\n    // Save the updated queue to localStorage after removing the action\r\n    Storage.save('offlineActions', this.queue.get());\r\n    console.log(`Action with ID ${actionId} has been removed from the queue.`);\r\n  }\r\n  \r\n\r\n  clearQueuedAction(): void {\r\n    if (!this.queue) {\r\n      console.error('Queue is not initialized.');\r\n      return;\r\n    }\r\n\r\n    this.queue.clear();\r\n\r\n    // Clear the queue in localStorage\r\n    Storage.save('offlineActions', []);\r\n    console.log('All actions have been cleared from the queue.');\r\n  }\r\n\r\n\r\n  // Process the queue manually\r\n  processQueue(): void {\r\n    if (this.onlineStatus) {\r\n      this.startSync();\r\n    } else {\r\n      console.log('Offline. Actions are in the queue.');\r\n    }\r\n  }\r\n\r\n  // Resolve conflicts between local and remote actions\r\n  resolveConflict(localAction: any, remoteAction: any): any {\r\n    return this.conflictResolution.resolve(localAction, remoteAction);\r\n  }\r\n\r\n  // Cleanup resources when the object is destroyed\r\n  destroy(): void {\r\n    if (this.statusCheckInterval) {\r\n      clearInterval(this.statusCheckInterval); // Stop the status checking interval\r\n    }\r\n    window.removeEventListener('online', this.handleOnlineStatus);\r\n    window.removeEventListener('offline', this.handleOfflineStatus);\r\n    console.log('OfflineSync instance destroyed.');\r\n  }\r\n}\r\n\r\nexport default OfflineSync;\r\n"],"names":["byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","toLowerCase","getRandomValues","rnds8","Uint8Array","rng","crypto","Error","bind","randomUUID","v4","options","buf","native","rnds","random","Queue","config","maxQueueSize","queue","prototype","add","action","id","type","concat","Date","now","uuidv4","exists","some","existingAction","JSON","stringify","data","console","warn","length","shift","get","__spreadArray","set","actions","remove","actionId","filter","clear","isEmpty","size","Storage","load","key","localStorage","getItem","parse","save","value","setItem","removeItem","Sync","onSyncSuccess","onSyncError","setSyncSuccessCallback","callback","setSyncErrorCallback","start","log","syncedActions","failedActions","_i","actions_1","syncAction","_b","sent","_a","error","error_1","message","error_2","Promise","resolve","reject","setTimeout","Math","LatestActionStrategy","localAction","remoteAction","timestamp","isOnline","navigator","onLine","getCurrentTimestamp","OfflineSync","_this","statusCheckInterval","handleStatusChange","status","onlineStatus","startSync","handleOnlineStatus","handleOfflineStatus","sync","conflictResolution","savedActions","forEach","detectStatus","window","addEventListener","setInterval","currentStatus","addAction","__assign","catch","err","getQueuedActions","queued","removeActionFromQueue","clearQueuedAction","processQueue","resolveConflict","destroy","clearInterval","removeEventListener"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}