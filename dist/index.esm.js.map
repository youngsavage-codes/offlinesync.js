{"version":3,"file":"index.esm.js","sources":["../src/components/queue.ts","../src/components/storage.ts","../src/components/sync.ts","../src/components/conflict.ts","../src/components/utils.ts","../src/index.ts"],"sourcesContent":["// src/queue.ts\r\n\r\ninterface Action {\r\n    type: string;         // Action type (e.g., \"create\", \"update\", \"delete\")\r\n    data: any;            // Action payload (the data to sync)\r\n    timestamp: number;    // Timestamp when the action was created (used for conflict resolution)\r\n    id?: string;          // Optional unique identifier for the action (useful for conflict resolution)\r\n  }\r\n  \r\n  class Queue {\r\n    private queue: Action[] = [];\r\n    private maxQueueSize: number;\r\n  \r\n    constructor(config: { maxQueueSize: number } = { maxQueueSize: 100 }) {\r\n      this.maxQueueSize = config.maxQueueSize;\r\n    }\r\n  \r\n    // Add an action to the queue\r\n    add(action: Action): void {\r\n      if (this.queue.length >= this.maxQueueSize) {\r\n        this.queue.shift(); // Remove the oldest action if the queue exceeds the max size\r\n      }\r\n      this.queue.push(action);\r\n    }\r\n  \r\n    // Retrieve all queued actions\r\n    get(): Action[] {\r\n      return [...this.queue]; // Return a copy of the queue to avoid direct mutation\r\n    }\r\n  \r\n    // Remove an action from the queue by its ID\r\n    remove(actionId: string): void {\r\n      this.queue = this.queue.filter(action => action.id !== actionId);\r\n    }\r\n  \r\n    // Clear all actions in the queue\r\n    clear(): void {\r\n      this.queue = [];\r\n    }\r\n  \r\n    // Check if the queue is empty\r\n    isEmpty(): boolean {\r\n      return this.queue.length === 0;\r\n    }\r\n  \r\n    // Get the size of the queue\r\n    size(): number {\r\n      return this.queue.length;\r\n    }\r\n  }\r\n  \r\n  export default Queue;\r\n  ","// src/storage.ts\r\n\r\nclass Storage {\r\n    // Save data to localStorage (or any other persistence layer)\r\n    static save(key: string, value: any): void {\r\n      try {\r\n        const stringValue = JSON.stringify(value);\r\n        localStorage.setItem(key, stringValue);\r\n      } catch (error) {\r\n        console.error('Error saving to localStorage', error);\r\n      }\r\n    }\r\n  \r\n    // Retrieve data from localStorage\r\n    static load(key: string): any {\r\n      try {\r\n        const value = localStorage.getItem(key);\r\n        if (value) {\r\n          return JSON.parse(value);\r\n        }\r\n        return null;\r\n      } catch (error) {\r\n        console.error('Error loading from localStorage', error);\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    // Clear data from localStorage\r\n    static clear(key: string): void {\r\n      try {\r\n        localStorage.removeItem(key);\r\n      } catch (error) {\r\n        console.error('Error clearing from localStorage', error);\r\n      }\r\n    }\r\n  \r\n    // Clear all localStorage data\r\n    static clearAll(): void {\r\n      try {\r\n        localStorage.clear();\r\n      } catch (error) {\r\n        console.error('Error clearing all localStorage data', error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default Storage;\r\n  ","// src/sync.ts\r\nimport Queue from './queue';\r\n\r\nclass Sync {\r\n  private queue: Queue;\r\n\r\n  constructor(queue: Queue) {\r\n    this.queue = queue;\r\n  }\r\n\r\n  // Start syncing the actions from the queue\r\n  async start(): Promise<void> {\r\n    const actions = this.queue.get();\r\n    if (actions.length === 0) {\r\n      console.log('No actions to sync.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      for (const action of actions) {\r\n        // Simulating API call or syncing with the server\r\n        await this.syncAction(action);\r\n        console.log(`Action synced: ${action.type}`);\r\n        this.queue.clear(); // Clear queue after successful sync\r\n      }\r\n    } catch (error) {\r\n      console.error('Sync failed:', error);\r\n    }\r\n  }\r\n\r\n  // Simulate syncing an action\r\n  private async syncAction(action: any): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // Simulate an API request\r\n        console.log(`Syncing action: ${action.type}`);\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  }\r\n}\r\n\r\nexport default Sync;\r\n","// src/conflict.ts\r\n\r\ninterface ConflictResolutionStrategy {\r\n  resolve(localAction: any, remoteAction: any): any;\r\n}\r\n\r\nclass LatestActionStrategy implements ConflictResolutionStrategy {\r\n  resolve(localAction: any, remoteAction: any): any {\r\n    // Resolve conflict by choosing the latest action (based on timestamp)\r\n    return localAction.timestamp > remoteAction.timestamp ? localAction : remoteAction;\r\n  }\r\n}\r\n\r\nclass MergeChangesStrategy implements ConflictResolutionStrategy {\r\n  resolve(localAction: any, remoteAction: any): any {\r\n    // Custom merge logic (this can be customized as per your needs)\r\n    return {\r\n      ...localAction,\r\n      data: { ...localAction.data, ...remoteAction.data },\r\n    };\r\n  }\r\n}\r\n\r\nexport { LatestActionStrategy, MergeChangesStrategy };\r\n","// src/utils.ts\r\n\r\n// Check if the device is online\r\nexport function isOnline(): boolean {\r\n  return navigator.onLine;\r\n}\r\n\r\n// Get the current timestamp\r\nexport function getCurrentTimestamp(): number {\r\n  return Date.now();\r\n}\r\n","// src/index.ts\r\n\r\nimport Queue from './components/queue';\r\nimport Storage from './components/storage';\r\nimport Sync from './components/sync';\r\nimport { LatestActionStrategy } from './components/conflict';\r\nimport { isOnline, getCurrentTimestamp } from './components/utils';\r\n\r\nclass OfflineSync {\r\n  private queue: Queue;\r\n  private sync: Sync;\r\n  private conflictResolution: LatestActionStrategy;\r\n\r\n  constructor(config: { maxQueueSize: number; conflictStrategy: string }) {\r\n    this.queue = new Queue(config);\r\n    this.sync = new Sync(this.queue);\r\n    this.conflictResolution = new LatestActionStrategy();\r\n\r\n    // Load the queue from localStorage if there are any saved actions\r\n    const savedActions = Storage.load('offlineActions');\r\n    if (savedActions) {\r\n      savedActions.forEach((action: any) => this.queue.add(action));\r\n    }\r\n  }\r\n\r\n  // Add an action to the queue and save to localStorage\r\n  addAction(action: any): void {\r\n    const timestamp = getCurrentTimestamp();\r\n    this.queue.add({ ...action, timestamp });\r\n\r\n    // Save the updated queue to localStorage\r\n    Storage.save('offlineActions', this.queue.get());\r\n  }\r\n\r\n  // Start the syncing process\r\n  startSync(): void {\r\n    if (isOnline()) {\r\n      this.sync.start();\r\n    } else {\r\n      console.log('Offline. Queuing actions.');\r\n    }\r\n  }\r\n\r\n  // Resolve conflicts between local and remote actions\r\n  resolveConflict(localAction: any, remoteAction: any): any {\r\n    return this.conflictResolution.resolve(localAction, remoteAction);\r\n  }\r\n}\r\n\r\nexport default OfflineSync;\r\n"],"names":["Queue","config","maxQueueSize","queue","prototype","add","action","length","shift","push","get","__spreadArray","remove","actionId","filter","id","clear","isEmpty","size","Storage","save","key","value","stringValue","JSON","stringify","localStorage","setItem","error","console","load","getItem","parse","removeItem","clearAll","Sync","start","actions","log","_i","actions_1","syncAction","_a","sent","concat","type","error_1","Promise","resolve","setTimeout","LatestActionStrategy","localAction","remoteAction","timestamp","isOnline","navigator","onLine","getCurrentTimestamp","Date","now","OfflineSync","_this","sync","conflictResolution","savedActions","forEach","addAction","__assign","startSync","resolveConflict"],"mappings":"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"}