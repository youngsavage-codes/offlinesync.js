{"code":"// src/index.ts\nimport { __assign } from \"tslib\";\nimport Queue from './components/queue';\nimport Storage from './components/storage';\nimport Sync from './components/sync';\nimport { LatestActionStrategy } from './components/conflict';\nimport { isOnline, getCurrentTimestamp } from './components/utils';\nvar OfflineSync = /** @class */ (function () {\n    function OfflineSync(config) {\n        var _this = this;\n        this.queue = new Queue(config);\n        this.sync = new Sync(this.queue);\n        this.conflictResolution = new LatestActionStrategy();\n        // Load the queue from localStorage if there are any saved actions\n        var savedActions = Storage.load('offlineActions');\n        if (savedActions) {\n            savedActions.forEach(function (action) { return _this.queue.add(action); });\n        }\n    }\n    // Add an action to the queue and save to localStorage\n    OfflineSync.prototype.addAction = function (action) {\n        var timestamp = getCurrentTimestamp();\n        this.queue.add(__assign(__assign({}, action), { timestamp: timestamp }));\n        // Save the updated queue to localStorage\n        Storage.save('offlineActions', this.queue.get());\n    };\n    // Start the syncing process\n    OfflineSync.prototype.startSync = function () {\n        if (isOnline()) {\n            this.sync.start();\n        }\n        else {\n            console.log('Offline. Queuing actions.');\n        }\n    };\n    // Resolve conflicts between local and remote actions\n    OfflineSync.prototype.resolveConflict = function (localAction, remoteAction) {\n        return this.conflictResolution.resolve(localAction, remoteAction);\n    };\n    return OfflineSync;\n}());\nexport default OfflineSync;\n//# sourceMappingURL=index.js.map","references":["C:/Users/User/Documents/GitHub/offlinesync.js/src/components/queue.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/storage.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/sync.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/conflict.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/utils.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,eAAe;;AAEf,OAAO,KAAK,MAAM,oBAAoB,CAAC;AACvC,OAAO,OAAO,MAAM,sBAAsB,CAAC;AAC3C,OAAO,IAAI,MAAM,mBAAmB,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AAEnE;IAKE,qBAAY,MAA0D;QAAtE,iBAUC;QATC,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAErD,kEAAkE;QAClE,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACpD,IAAI,YAAY,EAAE,CAAC;YACjB,YAAY,CAAC,OAAO,CAAC,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAtB,CAAsB,CAAC,CAAC;QAChE,CAAC;IACH,CAAC;IAED,sDAAsD;IACtD,+BAAS,GAAT,UAAU,MAAW;QACnB,IAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;QACxC,IAAI,CAAC,KAAK,CAAC,GAAG,uBAAM,MAAM,KAAE,SAAS,WAAA,IAAG,CAAC;QAEzC,yCAAyC;QACzC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,4BAA4B;IAC5B,+BAAS,GAAT;QACE,IAAI,QAAQ,EAAE,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,qDAAqD;IACrD,qCAAe,GAAf,UAAgB,WAAgB,EAAE,YAAiB;QACjD,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACpE,CAAC;IACH,kBAAC;AAAD,CAAC,AAvCD,IAuCC;AAED,eAAe,WAAW,CAAC\"}"}
