{"code":"import { __awaiter, __generator } from \"tslib\";\nvar Sync = /** @class */ (function () {\n    function Sync(queue) {\n        this.queue = queue;\n    }\n    // Start syncing the actions from the queue\n    Sync.prototype.start = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var actions, _i, actions_1, action, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        actions = this.queue.get();\n                        if (actions.length === 0) {\n                            console.log('No actions to sync.');\n                            return [2 /*return*/];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 6, , 7]);\n                        _i = 0, actions_1 = actions;\n                        _a.label = 2;\n                    case 2:\n                        if (!(_i < actions_1.length)) return [3 /*break*/, 5];\n                        action = actions_1[_i];\n                        // Simulating API call or syncing with the server\n                        return [4 /*yield*/, this.syncAction(action)];\n                    case 3:\n                        // Simulating API call or syncing with the server\n                        _a.sent();\n                        console.log(\"Action synced: \".concat(action.type));\n                        this.queue.clear(); // Clear queue after successful sync\n                        _a.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 2];\n                    case 5: return [3 /*break*/, 7];\n                    case 6:\n                        error_1 = _a.sent();\n                        console.error('Sync failed:', error_1);\n                        return [3 /*break*/, 7];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Simulate syncing an action\n    Sync.prototype.syncAction = function (action) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve) {\n                        setTimeout(function () {\n                            // Simulate an API request\n                            console.log(\"Syncing action: \".concat(action.type));\n                            resolve();\n                        }, 1000);\n                    })];\n            });\n        });\n    };\n    return Sync;\n}());\nexport default Sync;\n//# sourceMappingURL=sync.js.map","references":["C:/Users/User/Documents/GitHub/offlinesync.js/src/components/queue.ts"],"map":"{\"version\":3,\"file\":\"sync.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/components/sync.ts\"],\"names\":[],\"mappings\":\";AAGA;IAGE,cAAY,KAAY;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,2CAA2C;IACrC,oBAAK,GAAX;;;;;;wBACQ,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;wBACjC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;4BACzB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;4BACnC,sBAAO;wBACT,CAAC;;;;8BAG6B,EAAP,mBAAO;;;6BAAP,CAAA,qBAAO,CAAA;wBAAjB,MAAM;wBACf,iDAAiD;wBACjD,qBAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAA;;wBAD7B,iDAAiD;wBACjD,SAA6B,CAAC;wBAC9B,OAAO,CAAC,GAAG,CAAC,yBAAkB,MAAM,CAAC,IAAI,CAAE,CAAC,CAAC;wBAC7C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,oCAAoC;;;wBAJrC,IAAO,CAAA;;;;;wBAO5B,OAAO,CAAC,KAAK,CAAC,cAAc,EAAE,OAAK,CAAC,CAAC;;;;;;KAExC;IAED,6BAA6B;IACf,yBAAU,GAAxB,UAAyB,MAAW;;;gBAClC,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO;wBACzB,UAAU,CAAC;4BACT,0BAA0B;4BAC1B,OAAO,CAAC,GAAG,CAAC,0BAAmB,MAAM,CAAC,IAAI,CAAE,CAAC,CAAC;4BAC9C,OAAO,EAAE,CAAC;wBACZ,CAAC,EAAE,IAAI,CAAC,CAAC;oBACX,CAAC,CAAC,EAAC;;;KACJ;IACH,WAAC;AAAD,CAAC,AArCD,IAqCC;AAED,eAAe,IAAI,CAAC\"}"}
