{"code":"import { __assign } from \"tslib\";\nimport Queue from './components/queue';\nimport Storage from './components/storage';\nimport Sync from './components/sync';\nimport { LatestActionStrategy } from './components/conflict';\nimport { isOnline, getCurrentTimestamp } from './components/utils';\nvar OfflineSync = /** @class */ (function () {\n    function OfflineSync(config) {\n        var _this = this;\n        this.statusCheckInterval = null;\n        // Handle status changes\n        this.handleStatusChange = function (status) {\n            if (_this.onlineStatus !== status) {\n                _this.onlineStatus = status;\n                console.log('Online Status Changed:', _this.onlineStatus ? 'Online' : 'Offline');\n                if (_this.onlineStatus) {\n                    _this.startSync();\n                }\n            }\n        };\n        this.handleOnlineStatus = function () { return _this.handleStatusChange(true); };\n        this.handleOfflineStatus = function () { return _this.handleStatusChange(false); };\n        this.queue = new Queue(config);\n        this.sync = new Sync(this.queue);\n        this.conflictResolution = new LatestActionStrategy();\n        this.onlineStatus = isOnline(); // Set initial online status\n        // Load the queue from localStorage if there are any saved actions\n        var savedActions = Storage.load('offlineActions');\n        if (savedActions) {\n            savedActions.forEach(function (action) { return _this.queue.add(action); });\n        }\n        // Attach sync success callback\n        this.sync.setSyncSuccessCallback(function (syncedActions) {\n            console.log('Sync completed successfully:', syncedActions);\n            // Remove successfully synced actions and update localStorage\n            syncedActions.forEach(function (action) { return _this.queue.remove(action.id); });\n            Storage.save('offlineActions', _this.queue.get()); // Sync queue to localStorage\n        });\n        // Start detecting the status automatically\n        this.detectStatus();\n        // Listen for manual online/offline status changes\n        window.addEventListener('online', this.handleOnlineStatus);\n        window.addEventListener('offline', this.handleOfflineStatus);\n    }\n    // Detect and update online status every second\n    OfflineSync.prototype.detectStatus = function () {\n        var _this = this;\n        this.statusCheckInterval = setInterval(function () {\n            var currentStatus = isOnline();\n            _this.handleStatusChange(currentStatus);\n        }, 1000);\n    };\n    // Add an action to the queue and save to localStorage\n    OfflineSync.prototype.addAction = function (action) {\n        var timestamp = getCurrentTimestamp();\n        this.queue.add(__assign(__assign({}, action), { timestamp: timestamp }));\n        // Save the updated queue to localStorage\n        Storage.save('offlineActions', this.queue.get());\n    };\n    // Start the syncing process\n    OfflineSync.prototype.startSync = function () {\n        if (this.onlineStatus) {\n            this.sync.start().catch(function (err) {\n                console.error('Sync process failed:', err);\n            });\n            console.log('Sync process started - Online');\n        }\n        else {\n            console.log('Offline. Queuing actions.');\n        }\n    };\n    // Process the queue manually\n    OfflineSync.prototype.processQueue = function () {\n        if (this.onlineStatus) {\n            this.startSync();\n        }\n        else {\n            console.log('Offline. Actions are in the queue.');\n        }\n    };\n    // Resolve conflicts between local and remote actions\n    OfflineSync.prototype.resolveConflict = function (localAction, remoteAction) {\n        return this.conflictResolution.resolve(localAction, remoteAction);\n    };\n    // Cleanup resources when the object is destroyed\n    OfflineSync.prototype.destroy = function () {\n        if (this.statusCheckInterval) {\n            clearInterval(this.statusCheckInterval); // Stop the status checking interval\n        }\n        window.removeEventListener('online', this.handleOnlineStatus);\n        window.removeEventListener('offline', this.handleOfflineStatus);\n        console.log('OfflineSync instance destroyed.');\n    };\n    return OfflineSync;\n}());\nexport default OfflineSync;\n//# sourceMappingURL=index.js.map","references":["C:/Users/User/Documents/GitHub/offlinesync.js/src/components/queue.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/storage.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/sync.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/conflict.ts","C:/Users/User/Documents/GitHub/offlinesync.js/src/components/utils.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,MAAM,oBAAoB,CAAC;AACvC,OAAO,OAAO,MAAM,sBAAsB,CAAC;AAC3C,OAAO,IAAI,MAAM,mBAAmB,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AAEnE;IAOE,qBAAY,MAA0D;QAAtE,iBA0BC;QA5BO,wBAAmB,GAA0B,IAAI,CAAC;QAsC1D,wBAAwB;QAChB,uBAAkB,GAAG,UAAC,MAAe;YAC3C,IAAI,KAAI,CAAC,YAAY,KAAK,MAAM,EAAE,CAAC;gBACjC,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBAEhF,IAAI,KAAI,CAAC,YAAY,EAAE,CAAC;oBACtB,KAAI,CAAC,SAAS,EAAE,CAAC;gBACnB,CAAC;YACH,CAAC;QACH,CAAC,CAAC;QAEM,uBAAkB,GAAG,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAA7B,CAA6B,CAAC;QACzD,wBAAmB,GAAG,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAA9B,CAA8B,CAAC;QAhDjE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,IAAI,oBAAoB,EAAE,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,QAAQ,EAAE,CAAC,CAAC,4BAA4B;QAE5D,kEAAkE;QAClE,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACpD,IAAI,YAAY,EAAE,CAAC;YACjB,YAAY,CAAC,OAAO,CAAC,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAtB,CAAsB,CAAC,CAAC;QAChE,CAAC;QAED,+BAA+B;QAC/B,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,UAAC,aAAa;YAC7C,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,aAAa,CAAC,CAAC;YAC3D,6DAA6D;YAC7D,aAAa,CAAC,OAAO,CAAC,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,EAA5B,CAA4B,CAAC,CAAC;YACrE,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,6BAA6B;QACjF,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,kDAAkD;QAClD,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3D,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC/D,CAAC;IAED,+CAA+C;IAC/C,kCAAY,GAAZ;QAAA,iBAKC;QAJC,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC;YACrC,IAAM,aAAa,GAAG,QAAQ,EAAE,CAAC;YACjC,KAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACzC,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAiBD,sDAAsD;IACtD,+BAAS,GAAT,UAAU,MAAW;QACnB,IAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;QACxC,IAAI,CAAC,KAAK,CAAC,GAAG,uBAAM,MAAM,KAAE,SAAS,WAAA,IAAG,CAAC;QAEzC,yCAAyC;QACzC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,4BAA4B;IAC5B,+BAAS,GAAT;QACE,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,UAAC,GAAG;gBAC1B,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAC/C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,6BAA6B;IAC7B,kCAAY,GAAZ;QACE,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,qDAAqD;IACrD,qCAAe,GAAf,UAAgB,WAAgB,EAAE,YAAiB;QACjD,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACpE,CAAC;IAED,iDAAiD;IACjD,6BAAO,GAAP;QACE,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,oCAAoC;QAC/E,CAAC;QACD,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC9D,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAChE,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;IACjD,CAAC;IACH,kBAAC;AAAD,CAAC,AAtGD,IAsGC;AAED,eAAe,WAAW,CAAC\"}","dts":{"name":"C:/Users/User/Documents/GitHub/offlinesync.js/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"declare class OfflineSync {\n    private queue;\n    private sync;\n    private conflictResolution;\n    onlineStatus: boolean;\n    private statusCheckInterval;\n    constructor(config: {\n        maxQueueSize: number;\n        conflictStrategy: string;\n    });\n    detectStatus(): void;\n    private handleStatusChange;\n    private handleOnlineStatus;\n    private handleOfflineStatus;\n    addAction(action: any): void;\n    startSync(): void;\n    processQueue(): void;\n    resolveConflict(localAction: any, remoteAction: any): any;\n    destroy(): void;\n}\nexport default OfflineSync;\n"}}
